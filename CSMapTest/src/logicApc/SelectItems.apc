/*The setupNecessaryFiles() function should automatically copy necessary files to CSPro HTML repository
however, it's not possible to copy or changes files in Windows OS ProgramFiles... HtmlDialogs=.\MyDialogsDirectory
seems only support UI dialogs files, not others... */
/*
function setupNecessaryFiles() 

string OriginalLogic_mapSignature, ModifiedLogic_mapSignature;
string mapLogicFile = pathname(Html) + @"mapping/logic-map.html";
	string RessourceMapPath = path.concat(Application, @"..\Library\src\RessourcesFolder");
	string ModifiedMapLogicFile=RessourceMapPath+@"\html\mapping\logic-map.html";
	string LeafletDrawPath=RessourceMapPath+@"\html\external\leaflet";
	string CSProLeafletPath=pathname(Html) +@"external\leaflet";

	errmsg ("Le chemin du fichier est %v ",RessourceMapPath);
OriginalLogic_mapSignature=diagnostics("md5", strip(mapLogicFile));
ModifiedLogic_mapSignature=diagnostics("md5", strip(ModifiedMapLogicFile));
list string CsLeafletRepositoryFiles,LeafletRepositoryFiles ;
	dirlist(CsLeafletRepositoryFiles,CSProLeafletPath,filter := "*.js;*.css;*.map",recursive := false);
	dirlist (LeafletRepositoryFiles,LeafletDrawPath,filter := "*.js;*.css;*.map",recursive := false);
	do numeric i = 1 while i <= CsLeafletRepositoryFiles.length()
		do numeric ctr=1 while ctr <= LeafletRepositoryFiles.length()
			string filenameCS = path.getFileName(CsLeafletRepositoryFiles(i));
			string filenameLib=path.getFileName(LeafletRepositoryFiles(ctr));
			if filenameCS<>filenameLib then
				filecopy(LeafletRepositoryFiles(ctr), CSProLeafletPath);
			endif;
		enddo;
	enddo;
	if OriginalLogic_mapSignature<>ModifiedLogic_mapSignature then
		string CsMapFolder=pathname(Html) + "mapping";
		
		//------- First way to rename files
		list string CsMapFolderFileListing;
		dirlist(CsMapFolderFileListing, CsMapFolder,"*.html");
		do numeric i = 1 while i <= CsMapFolderFileListing.length()
			string Fname = CsMapFolderFileListing(i);
					string LogicMapFname=path.getFileName(CsMapFolderFileListing(i));
			if LogicMapFname="logic-map.html" then
				filerename(fname, "logic-map-original.html");
			endif;
		enddo;
		//End First way to rename files
		
		if fileexist (mapLogicFile)
			then
			filerename (mapLogicFile, "logic-map_original.html");
			filecopy(ModifiedMapLogicFile,CsMapFolder);
		endif;
	endif;
end;


/* --------------Starting of functions designed to deal with legacy dat files--------------------*/
function string mapDataPath()
string dataPath = path.concat(dataDirectory, "dataForMap"); 
if ! direxist(dataPath) then 
    numeric directoryCreated=dircreate(dataPath);
	endif;
exit dataPath;
end;

function string DataByCluster()
string dataPath = path.concat(dataDirectory, "Arrived"); 
exit dataPath;
end;

function string CollapseTempFilesForMap()
dataFileTemp=mapDataPath() + @"\Temp\AllHouseholdsForMap.dat";
numeric isConcatenated= FileConcat(dictName, dataFileTemp, DataByCluster() + @"\L????????.dat" );	
end;


Function String DataFilesForMap()
	string TempDataFileSignature, DataFileSignature;
	string dataFile = mapDataPath() + @"\AllHouseholdsForMap.dat";
	TempDataFileSignature=diagnostics("md5", strip(dataFileTemp));
	DataFileSignature=diagnostics("md5", strip(dataFile));
		if TempDataFileSignature<>DataFileSignature then
		filecopy(dataFileTemp, mapDataPath());
	endif;
	string tempFolder=mapDataPath() + @"\Temp";
	list string tempFiles;
	dirlist(tempFiles, tempFolder);
do numeric i = 1 while i <= tempFiles.length()
	numeric isDeleted= filedelete(tempFiles(i));
	//errmsg ("Le fichier %s a ete efface %v ",tempFiles(i),isDeleted);
enddo;
		dirdelete(tempFolder);
exit dataFile;
end;

function setDataFile()
setfile (dictName,DataFilesForMap(),append);
end;

function clusterArray()
	numeric i;
	setDataFile();
	
forcase dictName do

		inc(ClustersEntered(CLUST_NO));
	enddo;

	ClustersEntered.getKeys(ClustersList);
	ClustersList.removeDuplicates();
do i = 1 while i <= ClustersList.length()	
   clustArray(i,1) = maketext( "%v",(i));
  	clustArray(i,2) =maketext( "%v",ClustersList(i));
			    enddo;
 	clusterArray=i-1;
end;
*/
/* --------------End for legacy Dat file--------------------*/

/* --------------Functions to extract data from SQLite/CSDB/CSDBE--------------------*/
function clusterArray()
 numeric i;
	string Coord_query_formatter=maketext("SELECT clusternumber FROM 'level-1' GROUP BY clusternumber;");
	sqlquery(LISTING_DICT,clustersList,Coord_query_formatter);
				do i = 1 while i <= clustersList.length()	
   clustArray(i,1) = maketext( "%v",(i));
  	clustArray(i,2) =maketext( "%v",clustersList(i));
	enddo;
 	clusterArray=i-1;
end;
/*
function showAllPointsToMap()
cartoDyn.clearMarkers();
	//habillageMap();
	 string coord;
	 list string cumulCoord;
	array string listeCoord(10000,2);
	string usern=deviceName();
	string nomListCsdb=strip(usern)+"_liste_ipb"+".csdb";
		string cheminCsdb=maketext (pathname(Application) +"\Data\"+nomListCsdb);
	string Coord_query_formatter=maketext("SELECT db_ipb_rec.y_coord,db_ipb_rec.x_coord FROM db_ipb_rec JOIN `level-1` ON `level-1`.`level-1-id` = db_ipb_rec.`level-1-id`JOIN cases ON cases.id = `level-1`.`case-id`");
	
	numeric queryLength=sqlquery(PRELISTE_IPB,listeCoord,Coord_query_formatter);
	
do numeric ctr = 1 while ctr <= queryLength
numeric xCoord= tonumber (listeCoord(ctr,1));
numeric yCoord= tonumber (listeCoord(ctr,2));
	{coord= maketext("%s,%s",xCoord,yCoord);
	cumulCoord. add (coord);}
	numeric markerId = cartoDyn.addMarker(xCoord,yCoord);
enddo;
	//cumulCoord.show("La liste des coordonnees est:");
	cartoDyn.show();
end;*/



/* --------------End of functions specifically designed to extract data from SQLite/CSDB/CSDB--------------------*/



function displArray()
	numeric nLines = clusterArray();
	showarray(tr ("Veuillez choisir une grappe"),clustArray, nLines,
		title( tr("Idx"), tr("Grappe")));
end;


function displayOneCluster()
clusterArray();
	numeric result=clustersList.show(tr("Veuillez choisir la grappe!"));
	numeric noCluster=clustersList(result);
	exit noCluster;
end;


function string showCsproValueInSelect(string value)
string result= CS.UI.showDialog(path := @"..\src\RessourcesFolder\html\dialog\select.html", inputData := @object value);
	//errmsg ("La valeur de retour du dialog est %v ",result);
exit result;
//ClustersList.show("Resultat")
end;
 
  
  Function string extractNumericFromString (string alphaNumeric) /*Can be used only to extract numeric from an alphanumeric string without any separator*/
numeric i;
string isNumeric,allNumeric,result;
do i = 1 while i <= length (strip(alphanumeric)) 

    if alphanumeric[i:1] in "0":"9" then
  
        isNumeric=alphanumeric [i:1];
	
		allNumeric = maketext("%s,%s", allNumeric, isNumeric);
    endif;
		
enddo;
result = allNumeric[2:length(allNumeric)];

exit result;
end;

 Function string extractNumeric (string alphaNumeric) /*Specifically to the output of dynamic checkboxes AKA CSPro select dialog*/
string result,allNumeric;
if pos('{"rowIndices":[',alphaNumeric) then
			result=strip(alphanumeric[length('{"rowIndices":[')]);
			allNumeric=result[2:length(result) - 3];
		endif;
		//errmsg ("Le(s) numero(2) de grappe(s) sont (est) %s",allNumeric);
exit allNumeric;
end;


function string selectJsonArray(string titleName, list string headerCaption, array string data(,),NLines) 
string caption1,caption2,result,resultTemp,resultF;
numeric ptr;
do  numeric i=1 while i <= headerCaption.length();
if i>0 then 
	caption1=headerCaption(1);
	caption2=headerCaption(2);
	endif;
	enddo;
	
		string JsonPart1=maketext('{"title": "%s:","multiple": true,"header": [{"caption": "%s"}, {"caption": "%s"}],"rows": [', titleName, caption1, caption2);
			

do numeric ctr  = 1 while ctr <= NLines by 1
		
		 resultTemp = maketext('{"index": %v, "columns": [{"text":"%s"},{"text": "%v"}]},',ctr,data(ctr,1),data(ctr,2));

		result = result+resultTemp;
	enddo;
	if length(result) then
		resultF = result[1:length(result) - 1];
	endif;
string SelectJsonResult=JsonPart1 + resultF + ']}';
	exit SelectJsonResult; 
		end;


function string selectMultipleClusters()
	string selectTitleName=tr("SVP, veuillez choisir les grappes");
	list String headerSelect=tr("Idx"),tr("Grappe");
	numeric qLines= clusterArray();
		string resultSelect=selectJsonArray(selectTitleName,headerSelect,clustArray,qLines);
					exit resultSelect;
end;

function string resultSelectNumber()
string resultsSelect=extractNumeric(showCsproValueInSelect(selectMultipleClusters()));
exit resultsSelect;
end;


function string clusterNumberString(string inputString)
	string resultTemp;
	listClusterNumbers.clear();
      numeric separator=poschar(",", inputString);   
	  if separator>0 then
	  do numeric i = 1 while i <= length(inputString) by separator
		 
	resultTemp=inputString[i:(separator)];
	listClusterNumbers.add(ClustersList (tonumber (resultTemp)));
		 		enddo;
				else 
		listClusterNumbers.add(ClustersList (tonumber (inputString)));
				endif
end

function string resultsClusterNumberList()
clusterNumberString(resultSelectNumber());
end;

